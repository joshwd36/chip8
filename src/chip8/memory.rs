pub struct Memory {
    buffer: Box<[u8]>,
}

pub const PROGRAM_START: u16 = 0x200;

static FONT: &'static [u8] = &[
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

impl Memory {
    pub fn new(program: &[u8]) -> Self {
        let mut buffer = vec![0u8; 4096].into_boxed_slice();
        let start = PROGRAM_START as usize;
        buffer[start..(program.len() + start)].copy_from_slice(program);

        buffer[0x50..=0x09F].copy_from_slice(FONT);

        Self { buffer }
    }

    pub fn get_u8(&self, address: u16) -> u8 {
        self.buffer[address as usize]
    }

    pub fn get_u16(&self, address: u16) -> u16 {
        let a = self.buffer[address as usize];
        let b = self.buffer[(address + 1) as usize];
        u16::from_be_bytes([a, b])
    }
}
